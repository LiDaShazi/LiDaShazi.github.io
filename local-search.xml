<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024-12-11</title>
    <link href="/2024/12/11/2024-12-11/"/>
    <url>/2024/12/11/2024-12-11/</url>
    
    <content type="html"><![CDATA[<h3 id="2024-12-11"><a href="#2024-12-11" class="headerlink" title="2024-12-11"></a>2024-12-11</h3><h4 id="vi和vim基本介绍"><a href="#vi和vim基本介绍" class="headerlink" title="vi和vim基本介绍"></a>vi和vim基本介绍</h4><p>vim是vi的增强版本，具有程序编辑能力</p><h4 id="vi和vim的三种常见模式"><a href="#vi和vim的三种常见模式" class="headerlink" title="vi和vim的三种常见模式"></a>vi和vim的三种常见模式</h4><p><strong>1.正常模式</strong></p><p><strong>快捷键：</strong></p><p>默认模式，在正常模式下可以使用快捷键</p><p>Nyy: yy复制当前行，3yy当前3行</p><p>p: 粘贴</p><p>Ndd: 删除当前行</p><p>&#x2F;加单词：先用&#x2F;进入命令行模式，在输入单词即可查找</p><p>：set nu和：set nonu :加入行号，取消行号</p><p>G和gg: 末行和首行</p><p>u: 撤销动作</p><p>光标移动到20行： ：set nu 输入20 输入shift g</p><p><strong>按下i,l,o,O,a,A,r,R等任何一个字母都会进入编辑模式，一般按下i即可</strong></p><p><strong>按：或者&#x2F;进入命令行模式</strong></p><p><strong>2.插入模式</strong></p><p>进行编辑</p><p><strong>3.命令行模式</strong></p><p>：wq保存退出，：q！强制退出  无修改：q退出</p><p>完成读取，存盘，替换，离开，显示行号等动作</p><p><strong>按esc进入正常模式</strong></p><p>ll 显示当前目录文件</p><h4 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h4><p>shutdown</p><p>​shutdown -h now :立即关机</p><p>​shutdown -1 now :1分钟后关机</p><p>​shutdown -r now :立即重启</p><p>halt（停止） 关机</p><p>reboot  重启</p><p>sync（同步）  保存，将内存的数据同步到磁盘上</p><p>su  - 用户名 切换系统管理员</p><p>logout 注销用户 只针对远程登录</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-12-10</title>
    <link href="/2024/12/10/2024-12-10/"/>
    <url>/2024/12/10/2024-12-10/</url>
    
    <content type="html"><![CDATA[<h3 id="2024-12-10"><a href="#2024-12-10" class="headerlink" title="2024-12-10"></a>2024-12-10</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><img src="/images/1.jpg" alt="1"></p><p>linux内核：centos redhat ubuntu suse fedora(发行版)</p><p>操作系统：windows android  linux 车载系统 </p><p>linux和unix的关系：linux是基于unix的开源操作系统</p><p>远程操作系统操作机房–命令行操作</p><p><strong>windows和VM和centos关系:</strong></p><p>VM软件可以在windows上创建一个虚拟机空间，而centos则装在这个空间上</p><p>而这个这个centos可以移植，用其他的vm打开</p><p>deprecate 反对</p><h4 id="虚拟机网络连接模式"><a href="#虚拟机网络连接模式" class="headerlink" title="虚拟机网络连接模式"></a><em>虚拟机网络连接模式</em></h4><p>桥接模式：虚拟机ip地址与宿主机ip地址在同一个网段 </p><p>可能会出现ip地址冲突，只有253个地址 0是网络号，255是广播</p><p>NAT模式：网络地址转换方式：宿主机会重新创建一个虚拟ip地址，而linux系统能在这个虚拟ip网段创建新的地址，linux可以访问外网，不会造成ip冲突，但是外网不能找到虚拟机</p><p>主机模式：linux是一个独立的主机，不能访问外网</p><p><strong>VMnet0网口对应的是桥接模式</strong></p><p><strong>VMnet8网口对应的是NAT模式</strong></p><p><strong>VMnet1网口对应的是仅主机模式</strong></p><p>linux磁盘分区至少有三个 根分区 swap分区 boot分区</p><p>重启指令 reboot</p><p>共享文件夹默认放在centos 的 &#x2F;mnt&#x2F;hgfs 下</p><h4 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h4><p>树状目录结构 &#x2F;根目录</p><p><strong>在linux世界里，一切皆文件</strong> （所有东西都映射为文件）</p><p><strong>bin：</strong>binary  常用的命令</p><p><strong>sbin:</strong>  系统管理员使用的系统管理程序</p><p><strong>home：</strong>存放普通用户的主目录，在linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</p><p><strong>root:</strong>   系统管理员 <strong>root&#x2F;desktop</strong> 桌面在这个之下</p><p>lib:   系统开机所需要的最基本的动态链接共享库，类似windows中的dll文件</p><p>DLL文件的作用是将程序中的一些功能模块化和共享化，避免重复开发和占用过多存储空间</p><p>lost+found: 系统非法关机，存放文件</p><p>dev:  管理设备，如cpu等等</p><p><strong>etc:</strong>    系统管理所需要的配置文件和子目录</p><p><strong>usr:</strong>    用户安装的很多应用程序和文件都存放在这个目录，类似于windows下的program fils目录</p><p><strong>boot:</strong>  启动linux的一些核心文件，包括一些连接文件和镜像文件</p><p>proc:  srv:  sys： 这三个最好别动</p><p>tmp:   临时文件</p><p><strong>media:</strong> U盘，光驱等，linux会将识别的设备挂载到这个目录下</p><p><strong>mnt:</strong>    为了让用户临时挂载别的文件系统的，可以将外部的存储挂载到这上面，进入该目录就可以查看里面的内容</p><p><strong>opt:</strong>   存放安装之前的软件</p><p><strong>usr&#x2F;local:</strong>  安装过后的软件</p><p><strong>var:</strong>    不断扩充的东西，变量，日志</p><p>selinux: 安全相关</p><p>远程登录<strong>xshell</strong> 远程上传文件<strong>xftp</strong></p><p>需要linux服务器开启sshd服务，22号端口</p><p><strong>ifconfig</strong> 查看ip</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-12-9</title>
    <link href="/2024/12/09/2024-12-09/"/>
    <url>/2024/12/09/2024-12-09/</url>
    
    <content type="html"><![CDATA[<h3 id="2024-12-9"><a href="#2024-12-9" class="headerlink" title="2024-12-9"></a>2024-12-9</h3><p>B&#x2F;S和C&#x2F;S</p><p><strong>B&#x2F;S 架构：</strong> 基于浏览器和服务器的架构，用户通过浏览器访问服务器上的应用程序。</p><p><strong>C&#x2F;S 架构：</strong> 基于客户端和服务器的架构，需要专门的客户端软件来与服务器进行交互。</p><p>Browser:浏览器</p><p>服务器程序通常需要处理三类事件：I&#x2F;O事件，信号及定时事件。有两种事件处理模式：</p><p><strong>Reactor模式：</strong>要求主线程（I&#x2F;O处理单元）只负责监听文件描述符上是否有事件发生（可读、可写），若有，则立即通知工作线程（逻辑单元），将socket可读可写事件放入请求队列，交给工作线程处理。这个过程是同步的，读取完数据后应用进程才能处理数据。<br><strong>Proactor模式：</strong>将所有的I&#x2F;O操作都交给主线程和内核来处理（进行读、写），工作线程仅负责处理逻辑，如主线程读完成后users[sockfd].read()，选择一个工作线程来处理客户请求pool-&gt;append(users + sockfd)。</p><p><strong>无论是 Reactor，还是 Proactor，都是一种基于「事件分发」的网络编程模式，区别在于 Reactor 模式是基于「待完成」的 I&#x2F;O 事件，而 Proactor 模式则是基于「已完成」的 I&#x2F;O 事件。</strong></p><p><strong>文件描述符 (File Descriptor)</strong> 是操作系统中用于标识打开文件的整数标识符，常见于类 Unix 系统。</p><p><strong><code>std::atomic</code>的作用：</strong></p><p><strong><code>std::atomic</code>：</strong></p><ul><li>提供对某些变量的<strong>原子操作支持</strong>，避免多线程操作时的数据竞争（Data Race）。</li><li>确保对变量的操作是线程安全的，操作不可分割。</li><li>典型操作包括：读取、写入、加减等，所有操作会在硬件级别（如CPU指令）上保持一致性。</li></ul><p><strong><code>std::size_t</code>：</strong></p><ul><li>是一种无符号整数类型，用于表示内存大小或数组索引。</li><li>平台相关：在32位系统上通常为32位整数，在64位系统上通常为64位整数。</li><li>例如，<code>sizeof</code> 运算符的结果类型就是 <code>std::size_t</code>。</li></ul><p><strong>为什么使用<code>std::size_t</code>？</strong></p><ul><li><code>std::size_t</code> 是一种平台无关的无符号整数类型，专门用于表示对象的大小或数组的索引。</li><li>使用 <code>std::atomic&lt;std::size_t&gt;</code> 可以在线程安全的情况下操作这些大小或索引变量。</li></ul><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p><strong>单例模式是最常用的设计模式之一，目的是保证一个类只有一个实例，并提供一个他的全局访问点，该实例被所有程序模块共享。此时需要把该类的构造和析构函数放入private中。</strong></p><p>单例模式有两种实现方法，一种是懒汉模式，另一种是饿汉模式。</p><p><strong>懒汉模式：</strong> 顾名思义，非常的懒，只有当调用getInstance的时候，才会去初始化这个单例。其中在C++11后，不需要加锁，直接使用函数内局部静态对象即可。<br><strong>饿汉模式：</strong> 即迫不及待，在程序运行时立即初始化。饿汉模式不需要加锁，就可以实现线程安全，原因在于，在程序运行时就定义了对象，并对其初始化。之后，不管哪个线程调用成员函数getinstance()，都只不过是返回一个对象的指针而已。所以是线程安全的，不需要在获取实例的成员函数中加锁。</p><h4 id="RAII"><a href="#RAII" class="headerlink" title="RAII"></a>RAII</h4><p><strong>什么是RAII？</strong></p><p>RAII是<strong>Resource Acquisition Is Initialization</strong>（wiki上面翻译成 “资源获取就是初始化”）的简称，是C++语言的一种管理资源、避免泄漏的惯用法。利用的就是C++构造的对象最终会被销毁的原则。RAII的做法是使用一个对象，在其构造时获取对应的资源，在对象生命期内控制对资源的访问，使之始终保持有效，最后在对象析构的时候，释放构造时获取的资源。</p><p><strong>为什么要使用RAII？</strong></p><p>上面说到RAII是用来管理资源、避免资源泄漏的方法。那么，用了这么久了，也写了这么多程序了，口头上经常会说资源，那么资源是如何定义的？在计算机系统中，资源是数量有限且对系统正常运行具有一定作用的元素。比如：网络套接字、互斥锁、文件句柄和内存等等，它们属于系统资源。由于系统的资源是有限的，就好比自然界的石油，铁矿一样，不是取之不尽，用之不竭的，所以，我们在编程使用系统资源时，都必须遵循一个步骤：<br>1 申请资源；<br>2 使用资源；<br>3 释放资源。<br>第一步和第三步缺一不可，因为资源必须要申请才能使用的，使用完成以后，必须要释放，如果不释放的话，就会造成资源泄漏。</p><p>skip:跳过</p><p>cmd输入services.msc可以查看运行的服务</p><p>ipconfig&#x2F;ip a查看ip地址</p><p>hexo new post +文章名称</p><p>或者直接在post添加文件&#x2F;？</p><p>hexo clean</p><p>hexo generate</p><p>hexo deploy</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
