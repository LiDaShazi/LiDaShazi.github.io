<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024-12-12</title>
    <link href="/2024/12/12/2024-12-12/"/>
    <url>/2024/12/12/2024-12-12/</url>
    
    <content type="html"><![CDATA[<h2 id="2024-12-12"><a href="#2024-12-12" class="headerlink" title="2024-12-12"></a>2024-12-12</h2><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>YAML Front Matter 是一种用于在文本文件（如Markdown文件）中定义元数据的格式。它通常位于文件的顶部，由三个连续的短横线（<code>---</code>）包围的区域，用于指定个别文件的变量和配置信息。这些元数据可以包括文件的标题、日期、标签、类别等，也可以用于控制页面的布局和版本控制等。</p><p>YAML（Yet Another Markup Language）是一种轻量级的数据序列化格式，它易于人类阅读和编写，同时也易于机器解析和生成。</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p><strong>linux系统是一个多用户多任务的操作系统，任何一个使用系统资源的用户，都必须向系统管理员申请一个账号，然后以这个账号的身份进入系统</strong></p><p>用户归属于用户组  每个用户属于一个或多个组  root属于root组</p><p>家目录 &#x2F;home&#x2F; 目录下有各个创建的用户对应的家目录，当用户登录时自动进入自己的家目录</p><p><strong>添加用户</strong></p><p>useradd [选项，可以不选] 用户名   没有指定家目录，会自动创建与该用户同名的子家目录，并将该用户添加到家目录中，也就是创建&#x2F;home的目录</p><p><strong>useradd -d &#x2F;home&#x2F;llj</strong> 向指定目录添加用户 直接建新目录</p><p><strong>用户组没有指定，自动创建同名用户组</strong></p><p><strong>cd 切换目录</strong> change director</p><p><strong>passwd 用户名</strong> 指定密码</p><p><strong>mkdir</strong> make director 创建目录 添加用户</p><p><strong>删除目录</strong></p><p><strong>userdel 用户 删除用户</strong>，但是保留家目录</p><p><strong>userdel -r 用户 删除用户</strong>，并且家目录</p><p><strong>在删除用户时，一般要保留家目录，因为有一些文件需要保留</strong></p><p><strong>id 用户</strong>  查询用户信息</p><p><strong>su - 切换用户名</strong>  高权限用户进入低权限用户不需要输密码</p><p><strong>exit</strong> 回退到初始用户</p><p><strong>whoami</strong> 查看当前是那个用户</p><h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><p>类似于角色，系统能够可以对用共性的多个用户进行统一的管理</p><p><strong>groupadd</strong> 组名 添加用户组</p><p><strong>clean</strong> 清屏</p><p><strong>groupdel</strong> 组名 删除用户组</p><p><strong>useradd -g 用户组 用户名</strong> 添加有归属的用户</p><p><strong>usermod -g 用户组 用户名</strong> 修改用户所属用户组</p><p><strong>&#x2F;etc&#x2F;passwd</strong> 用户配置信息</p><p>用户名：口令x(指代密码):用户id:组id::家目录：shell</p><p><strong>&#x2F;etc&#x2F;grroup</strong> 组配置信息</p><p>组名：口令x:组id:组内用户列表</p><p><strong>&#x2F;etc&#x2F;shadow</strong>(阴影) 口令配置信息（密码和登录信息，加密）</p><p>注意： <strong>路径问题</strong></p><p>如果你运行的是 <code>vim etc/passwd</code>，而不是 <code>vim /etc/passwd</code>，系统会尝试在当前工作目录下寻找 <code>etc/passwd</code> 文件，而不是全局的 <code>/etc/passwd</code> 文件。如果当前目录中没有该文件，Vim 会新建一个空文件。</p><p><strong>解决办法</strong>：明确指定路径，运行 <code>vim /etc/passwd</code>。</p><h3 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h3><h4 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a><strong>运行级别</strong></h4><p>0：关机  1：单用户  2：多用户无网络  <strong>3：多用户有网络</strong>  4：系统保留  5：图形界面  6：重启</p><p><strong>系统的运行级别配置文件 &#x2F;etc&#x2F;inittab</strong>  tab(标签)</p><p><strong>init 运行级别</strong> 切换到指定运行级别</p><p><strong>cat 文件</strong> 查看文件</p><h4 id="SysVinit和Systemd"><a href="#SysVinit和Systemd" class="headerlink" title="SysVinit和Systemd"></a>SysVinit和Systemd</h4><h5 id="SysVinit"><a href="#SysVinit" class="headerlink" title="SysVinit"></a><strong>SysVinit</strong></h5><ul><li><strong>SysVinit</strong> 是一种传统的初始化系统，源自 Unix 的 <strong>System V</strong> 体系。</li><li>它负责管理系统的启动流程，包括启动服务、挂载文件系统、进入特定运行级别（Runlevel）等。</li><li>配置文件位于 <code>/etc/inittab</code>，通过运行级别（如 <code>0</code>、<code>1</code>、<code>2</code> 等）来定义系统的工作状态。</li><li>常见的服务脚本存放在 <code>/etc/init.d</code>。</li></ul><hr><h5 id="Systemd"><a href="#Systemd" class="headerlink" title="Systemd"></a><strong>Systemd</strong></h5><ul><li><strong>Systemd</strong> 是一种现代化的初始化系统，旨在克服 SysVinit 的局限性，为 Linux 系统提供更快、更可靠的启动和服务管理。</li><li>它使用并行化技术，加快了启动速度，同时引入了服务依赖管理和监控功能。</li><li>配置文件分布在 <code>/etc/systemd/</code> 和 <code>/lib/systemd/system</code> 下，以 <code>.service</code> 文件为主。</li><li>Systemd 不仅是初始化系统，还提供了许多附加功能，例如日志管理（<code>journald</code>）和设备管理（<code>udevd</code>）。</li></ul><hr><h5 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a><strong>主要区别</strong></h5><table><thead><tr><th>特性</th><th>SysVinit</th><th>Systemd</th></tr></thead><tbody><tr><td><strong>设计理念</strong></td><td>单线程、串行启动</td><td>并行化、多线程启动</td></tr><tr><td><strong>服务管理</strong></td><td>服务启动顺序需手动配置</td><td>自动管理服务依赖，按需启动</td></tr><tr><td><strong>启动速度</strong></td><td>启动速度较慢，不能并行化</td><td>启动速度快，支持并行化</td></tr><tr><td><strong>配置文件</strong></td><td><code>/etc/inittab</code> 和 <code>/etc/init.d</code></td><td><code>/etc/systemd/</code> 和 <code>.service</code> 文件</td></tr><tr><td><strong>运行级别</strong></td><td>使用运行级别（Runlevel）</td><td>使用目标（Target），更灵活</td></tr><tr><td><strong>监控和恢复</strong></td><td>缺乏内建服务监控功能</td><td>内建服务监控和自动恢复</td></tr><tr><td><strong>日志管理</strong></td><td>使用传统日志（如 <code>/var/log</code>）</td><td>集中式日志管理，通过 <code>journald</code></td></tr><tr><td><strong>依赖管理</strong></td><td>手动配置服务依赖</td><td>自动检测和管理服务依赖</td></tr><tr><td><strong>扩展功能</strong></td><td>无扩展功能</td><td>提供诸多功能，如 <code>timedatectl</code> 和 <code>networkd</code></td></tr><tr><td><strong>启动顺序</strong></td><td>严格按照脚本文件顺序启动</td><td>根据依赖动态调整启动顺序</td></tr><tr><td><strong>兼容性</strong></td><td>兼容旧版 UNIX 系统</td><td>主流 Linux 发行版的默认选项</td></tr></tbody></table><p><strong>如何找回丢失的root密码</strong></p><p>因为进入单用户模式，root不需要密码，进入到单用户模式，然后修改root密码</p><p>开机，在引导是输入回车，看到界面输入e,  新界面选中第二行输入e, 输入1，回车，输入b,进入单用户模式，修改passwd</p><h4 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h4><p>当我们对某个指令不熟悉时</p><p>man [命令&#x2F;配置文件]  entry(登记) format(格式)</p><p>help 命令 用法</p><h4 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h4><p><strong>目录结尾加&#x2F; 文件不叫 绝对路径开头加&#x2F; 相对路径开头不加&#x2F;</strong></p><p><strong>pwd</strong> 显示当前目录的绝对路径</p><p><strong>ls</strong> [目录或是文件] <strong>-a</strong> 包括隐藏的 <strong>-l</strong> 详细信息，以列表形式显示 -al ll是ls -l的别名</p><p><strong>cd</strong> 切换目录  <code>..</code> 的含义：当前路径的父目录，即去掉最后一层路径。</p><p>cd ~或者 cd 回到自己的家目录 cd ..回到当前目录的上一级 </p><p><strong>mkdir</strong> 创建目录 -p 创建多级目录 绝对路径或者相对路径</p><p><strong>rmdir</strong> 删除空目录 如果有内容是无法删除的  强制删除 rm -rf</p><p><strong>touch</strong> 创建新文件 在当前目录下 可以一次性创键多个文件</p><p><strong>CP</strong>  拷贝某文件到某目录下  cp aaa.txt bbb&#x2F;  -r(递归拷贝) 可以拷贝整个目录到另一个目录  \cp -r aaa&#x2F; bbb&#x2F; 强制覆盖，如果bbb&#x2F;目录下已经有aaa&#x2F;目录下的某个文件，\cp可以强制覆盖，不会提示</p><p><strong>rm</strong>  删除文件或目录  -rf(删除整个目录) -f(取消提示)</p><p><strong>mv</strong> 移动文件或者重命名 </p><p>mv 原名 新名（就在当前目录）重命名 mv aaa.txt bbb.txt</p><p>mv pig.txt &#x2F;root&#x2F; 移动文件</p><p><strong>cat</strong>  查看文件内容 以只读的方式打开 -n显示行号  加上管道命令 |more 进行分页显示</p><p>cat -n &#x2F;etc&#x2F;file | more</p><p><strong>more</strong> 以全屏的方式一次性显示文件  空格 下一页  enter 下一行 ctrl F下一页 ctrl B上一页</p><p><strong>less</strong> 一页一页全屏显示，大型文件查看</p><p><strong>&gt;指令和&gt;&gt;指令</strong>  &gt;输出重定向，会覆盖原文件内容  &gt;&gt;追加到该文件末尾 </p><p><strong>echo</strong> 输出内容到控制台</p><p><strong>head</strong> 显示文件开头内容（10行）  -n 5 指定行数</p><p><strong>tail</strong>  显示文件末尾内容（10行）  -n 5 指定行数  <strong>tail -f 实时追踪文件的更新</strong></p><p><strong>ln -s</strong> 类似于windows里面的快捷方式  </p><p>ln -s &#x2F;root linkToRoot rm -rf linkToRoot</p><p><strong>histoty</strong> 查看已经执行过的历史命令，也可以执行历史指令 history histoty 10</p><p><strong>!178</strong> 执行178这个指令</p><h4 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h4><p><strong>date</strong> 显示当前日期 date  date+%Y 年 date+%m  %d </p><p><strong>date “+Y</strong>年**%m<strong>月</strong>%d<strong>日</strong>%H<strong>时</strong>%M<strong>分</strong>%S<strong>秒</strong>“**</p><p><strong>date -s 设置时间</strong> date -s “2018-10-10 11-22-22”</p><p><strong>cal 显示日历</strong> cal 2024 显示某一年日历</p><h4 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h4><p><strong>find [搜索范围] [选项]</strong> </p><p>-name 查询方式为名字 -user 文件拥有者 -size +20M  -20M 20M  *.txt</p><p><strong>locate</strong>  快速定位文件路径</p><p>需要先使用updatedb 创建locate数据库  然后locate hello.txt</p><p><strong>| 管道命令</strong>，表示将前一个命令的处理结果传递给后面的命令处理</p><p><strong>grep [选项] 查找内容 源文件</strong>  <strong>-n显示匹配行号，-i忽略字母大小写</strong></p><p><strong>cat hello.txt | grep yes</strong> </p><h4 id="压缩和解压缩类"><a href="#压缩和解压缩类" class="headerlink" title="压缩和解压缩类"></a>压缩和解压缩类</h4><p><strong>gzip&#x2F;gunzip</strong>  压缩和解压缩文件</p><p>使用gzip对文件进行压缩后，不会保留原文件  </p><p><strong>zip&#x2F;unzip</strong> -r(压缩目录)  -d(指定压缩目录)</p><p>zip -r mypackage.zip &#x2F;home&#x2F; 将home目录压缩成mypackage.zip放到当前目录</p><p>zip -d &#x2F;opt&#x2F;tmp&#x2F; maypackage.zip 将maypackage.zip解压到&#x2F;opt&#x2F;tmp&#x2F;目录下</p><p><strong>tar</strong> </p><p>-c产生.tar打包文件 -v显示详细信息 -f指定压缩后的文件名 -z打包的同时压缩 -x解包.tar文件</p><p>tar -zcvf a.tar.gz a1.txt a2.txt  将a1.txt a2.txt打包并压缩成a.tar.gz</p><p>tar -zcvf myhome.tar.gz &#x2F;home&#x2F; 将&#x2F;home&#x2F;打包压缩成myhome.tar.gz</p><p>tar -zxvf a.tar.gz 解压a.tar.gz</p><p>tar -zxvf myhome.tar.gz -C &#x2F;opt&#x2F; 解压myhome.tar.gz 到&#x2F;opt&#x2F;</p>]]></content>
    
    
    <categories>
      
      <category>学习日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-12-11</title>
    <link href="/2024/12/11/2024-12-11/"/>
    <url>/2024/12/11/2024-12-11/</url>
    
    <content type="html"><![CDATA[<h3 id="2024-12-11"><a href="#2024-12-11" class="headerlink" title="2024-12-11"></a>2024-12-11</h3><h4 id="vi和vim基本介绍"><a href="#vi和vim基本介绍" class="headerlink" title="vi和vim基本介绍"></a>vi和vim基本介绍</h4><p>vim是vi的增强版本，具有程序编辑能力</p><h4 id="vi和vim的三种常见模式"><a href="#vi和vim的三种常见模式" class="headerlink" title="vi和vim的三种常见模式"></a>vi和vim的三种常见模式</h4><p><strong>1.正常模式</strong></p><p><strong>快捷键：</strong></p><p>默认模式，在正常模式下可以使用快捷键</p><p>Nyy: yy复制当前行，3yy当前3行</p><p>p: 粘贴</p><p>Ndd: 删除当前行</p><p>&#x2F;加单词：先用&#x2F;进入命令行模式，在输入单词即可查找</p><p>：set nu和：set nonu :加入行号，取消行号</p><p>G和gg: 末行和首行</p><p>u: 撤销动作</p><p>光标移动到20行： ：set nu 输入20 输入shift g</p><p><strong>按下i,l,o,O,a,A,r,R等任何一个字母都会进入编辑模式，一般按下i即可</strong></p><p><strong>按：或者&#x2F;进入命令行模式</strong></p><p><strong>2.插入模式</strong></p><p>进行编辑</p><p><strong>3.命令行模式</strong></p><p>：wq保存退出，：q！强制退出  无修改：q退出</p><p>完成读取，存盘，替换，离开，显示行号等动作</p><p><strong>按esc进入正常模式</strong></p><p>ll 显示当前目录文件</p><h4 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h4><p>shutdown</p><p>​shutdown -h now :立即关机</p><p>​shutdown -1 now :1分钟后关机</p><p>​shutdown -r now :立即重启</p><p>halt（停止） 关机</p><p>reboot  重启</p><p>sync（同步）  保存，将内存的数据同步到磁盘上</p><p>su  - 用户名 切换系统管理员</p><p>logout 注销用户 只针对远程登录</p>]]></content>
    
    
    <categories>
      
      <category>学习日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-12-10</title>
    <link href="/2024/12/10/2024-12-10/"/>
    <url>/2024/12/10/2024-12-10/</url>
    
    <content type="html"><![CDATA[<h3 id="2024-12-10"><a href="#2024-12-10" class="headerlink" title="2024-12-10"></a>2024-12-10</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><img src="/images/1.jpg" alt="1"></p><p>linux内核：centos redhat ubuntu suse fedora(发行版)</p><p>操作系统：windows android  linux 车载系统 </p><p>linux和unix的关系：linux是基于unix的开源操作系统</p><p>远程操作系统操作机房–命令行操作</p><p><strong>windows和VM和centos关系:</strong></p><p>VM软件可以在windows上创建一个虚拟机空间，而centos则装在这个空间上</p><p>而这个这个centos可以移植，用其他的vm打开</p><p>deprecate 反对</p><h4 id="虚拟机网络连接模式"><a href="#虚拟机网络连接模式" class="headerlink" title="虚拟机网络连接模式"></a><em>虚拟机网络连接模式</em></h4><p>桥接模式：虚拟机ip地址与宿主机ip地址在同一个网段 </p><p>可能会出现ip地址冲突，只有253个地址 0是网络号，255是广播</p><p>NAT模式：网络地址转换方式：宿主机会重新创建一个虚拟ip地址，而linux系统能在这个虚拟ip网段创建新的地址，linux可以访问外网，不会造成ip冲突，但是外网不能找到虚拟机</p><p>主机模式：linux是一个独立的主机，不能访问外网</p><p><strong>VMnet0网口对应的是桥接模式</strong></p><p><strong>VMnet8网口对应的是NAT模式</strong></p><p><strong>VMnet1网口对应的是仅主机模式</strong></p><p>linux磁盘分区至少有三个 根分区 swap分区 boot分区</p><p>重启指令 reboot</p><p>共享文件夹默认放在centos 的 &#x2F;mnt&#x2F;hgfs 下</p><h4 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h4><p>树状目录结构 &#x2F;根目录</p><p><strong>在linux世界里，一切皆文件</strong> （所有东西都映射为文件）</p><p><strong>bin：</strong>binary  常用的命令</p><p><strong>sbin:</strong>  系统管理员使用的系统管理程序</p><p><strong>home：</strong>存放普通用户的主目录，在linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</p><p><strong>root:</strong>   系统管理员 <strong>root&#x2F;desktop</strong> 桌面在这个之下</p><p>lib:   系统开机所需要的最基本的动态链接共享库，类似windows中的dll文件</p><p>DLL文件的作用是将程序中的一些功能模块化和共享化，避免重复开发和占用过多存储空间</p><p>lost+found: 系统非法关机，存放文件</p><p>dev:  管理设备，如cpu等等</p><p><strong>etc:</strong>    系统管理所需要的配置文件和子目录</p><p><strong>usr:</strong>    用户安装的很多应用程序和文件都存放在这个目录，类似于windows下的program fils目录</p><p><strong>boot:</strong>  启动linux的一些核心文件，包括一些连接文件和镜像文件</p><p>proc:  srv:  sys： 这三个最好别动</p><p>tmp:   临时文件</p><p><strong>media:</strong> U盘，光驱等，linux会将识别的设备挂载到这个目录下</p><p><strong>mnt:</strong>    为了让用户临时挂载别的文件系统的，可以将外部的存储挂载到这上面，进入该目录就可以查看里面的内容</p><p><strong>opt:</strong>   存放安装之前的软件</p><p><strong>usr&#x2F;local:</strong>  安装过后的软件</p><p><strong>var:</strong>    不断扩充的东西，变量，日志</p><p>selinux: 安全相关</p><p>远程登录<strong>xshell</strong> 远程上传文件<strong>xftp</strong></p><p>需要linux服务器开启sshd服务，22号端口</p><p><strong>ifconfig</strong> 查看ip</p>]]></content>
    
    
    <categories>
      
      <category>学习日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-12-09</title>
    <link href="/2024/12/09/2024-12-09/"/>
    <url>/2024/12/09/2024-12-09/</url>
    
    <content type="html"><![CDATA[<h3 id="2024-12-09"><a href="#2024-12-09" class="headerlink" title="2024-12-09"></a>2024-12-09</h3><p>B&#x2F;S和C&#x2F;S</p><p><strong>B&#x2F;S 架构：</strong> 基于浏览器和服务器的架构，用户通过浏览器访问服务器上的应用程序。</p><p><strong>C&#x2F;S 架构：</strong> 基于客户端和服务器的架构，需要专门的客户端软件来与服务器进行交互。</p><p>Browser:浏览器</p><p>服务器程序通常需要处理三类事件：I&#x2F;O事件，信号及定时事件。有两种事件处理模式：</p><p><strong>Reactor模式：</strong>要求主线程（I&#x2F;O处理单元）只负责监听文件描述符上是否有事件发生（可读、可写），若有，则立即通知工作线程（逻辑单元），将socket可读可写事件放入请求队列，交给工作线程处理。这个过程是同步的，读取完数据后应用进程才能处理数据。<br><strong>Proactor模式：</strong>将所有的I&#x2F;O操作都交给主线程和内核来处理（进行读、写），工作线程仅负责处理逻辑，如主线程读完成后users[sockfd].read()，选择一个工作线程来处理客户请求pool-&gt;append(users + sockfd)。</p><p><strong>无论是 Reactor，还是 Proactor，都是一种基于「事件分发」的网络编程模式，区别在于 Reactor 模式是基于「待完成」的 I&#x2F;O 事件，而 Proactor 模式则是基于「已完成」的 I&#x2F;O 事件。</strong></p><p><strong>文件描述符 (File Descriptor)</strong> 是操作系统中用于标识打开文件的整数标识符，常见于类 Unix 系统。</p><p><strong><code>std::atomic</code>的作用：</strong></p><p><strong><code>std::atomic</code>：</strong></p><ul><li>提供对某些变量的<strong>原子操作支持</strong>，避免多线程操作时的数据竞争（Data Race）。</li><li>确保对变量的操作是线程安全的，操作不可分割。</li><li>典型操作包括：读取、写入、加减等，所有操作会在硬件级别（如CPU指令）上保持一致性。</li></ul><p><strong><code>std::size_t</code>：</strong></p><ul><li>是一种无符号整数类型，用于表示内存大小或数组索引。</li><li>平台相关：在32位系统上通常为32位整数，在64位系统上通常为64位整数。</li><li>例如，<code>sizeof</code> 运算符的结果类型就是 <code>std::size_t</code>。</li></ul><p><strong>为什么使用<code>std::size_t</code>？</strong></p><ul><li><code>std::size_t</code> 是一种平台无关的无符号整数类型，专门用于表示对象的大小或数组的索引。</li><li>使用 <code>std::atomic&lt;std::size_t&gt;</code> 可以在线程安全的情况下操作这些大小或索引变量。</li></ul><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p><strong>单例模式是最常用的设计模式之一，目的是保证一个类只有一个实例，并提供一个他的全局访问点，该实例被所有程序模块共享。此时需要把该类的构造和析构函数放入private中。</strong></p><p>单例模式有两种实现方法，一种是懒汉模式，另一种是饿汉模式。</p><p><strong>懒汉模式：</strong> 顾名思义，非常的懒，只有当调用getInstance的时候，才会去初始化这个单例。其中在C++11后，不需要加锁，直接使用函数内局部静态对象即可。<br><strong>饿汉模式：</strong> 即迫不及待，在程序运行时立即初始化。饿汉模式不需要加锁，就可以实现线程安全，原因在于，在程序运行时就定义了对象，并对其初始化。之后，不管哪个线程调用成员函数getinstance()，都只不过是返回一个对象的指针而已。所以是线程安全的，不需要在获取实例的成员函数中加锁。</p><h4 id="RAII"><a href="#RAII" class="headerlink" title="RAII"></a>RAII</h4><p><strong>什么是RAII？</strong></p><p>RAII是<strong>Resource Acquisition Is Initialization</strong>（wiki上面翻译成 “资源获取就是初始化”）的简称，是C++语言的一种管理资源、避免泄漏的惯用法。利用的就是C++构造的对象最终会被销毁的原则。RAII的做法是使用一个对象，在其构造时获取对应的资源，在对象生命期内控制对资源的访问，使之始终保持有效，最后在对象析构的时候，释放构造时获取的资源。</p><p><strong>为什么要使用RAII？</strong></p><p>上面说到RAII是用来管理资源、避免资源泄漏的方法。那么，用了这么久了，也写了这么多程序了，口头上经常会说资源，那么资源是如何定义的？在计算机系统中，资源是数量有限且对系统正常运行具有一定作用的元素。比如：网络套接字、互斥锁、文件句柄和内存等等，它们属于系统资源。由于系统的资源是有限的，就好比自然界的石油，铁矿一样，不是取之不尽，用之不竭的，所以，我们在编程使用系统资源时，都必须遵循一个步骤：<br>1 申请资源；<br>2 使用资源；<br>3 释放资源。<br>第一步和第三步缺一不可，因为资源必须要申请才能使用的，使用完成以后，必须要释放，如果不释放的话，就会造成资源泄漏。</p><p>skip:跳过</p><p>cmd输入services.msc可以查看运行的服务</p><p>ipconfig&#x2F;ip a查看ip地址</p><p>hexo new post +文章名称</p><p>或者直接在post添加文件&#x2F;？</p><p>hexo clean</p><p>hexo generate</p><p>hexo deploy</p>]]></content>
    
    
    <categories>
      
      <category>学习日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
